name: Deploy to Cloudflare Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

permissions:
  contents: read
  deployments: write
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Pre-flight Cloudflare Pages API check
        env:
          CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          CF_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
          PAGES_PROJECT_NAME: ${{ secrets.PAGES_PROJECT_NAME }}
        run: |
          set -e
          if [ -z "$CF_API_TOKEN" ] || [ -z "$CF_ACCOUNT_ID" ] || [ -z "$PAGES_PROJECT_NAME" ]; then
            echo "::error::Missing one of CF_API_TOKEN, CF_ACCOUNT_ID, PAGES_PROJECT_NAME secrets" >&2
            exit 1
          fi
          echo "Listing Pages projects for account..."
          status=$(curl -s -o resp.json -w "%{http_code}" -H "Authorization: Bearer $CF_API_TOKEN" "https://api.cloudflare.com/client/v4/accounts/$CF_ACCOUNT_ID/pages/projects") || true
          echo "HTTP status: $status"
          if [ "$status" != "200" ]; then
            echo "::error::Failed to list Pages projects (status $status). Check: 1) Account ID correct 2) Token has 'Cloudflare Pages:Edit' permission 3) Token scoped to this account." >&2
            jq '.errors // empty' resp.json || cat resp.json || true
            exit 1
          fi
          echo "Project names present:" && (jq -r '.result[].name' resp.json || true)
          if ! jq -e --arg n "$PAGES_PROJECT_NAME" '.result[].name | select(. == $n)' resp.json > /dev/null; then
            echo "::error::Target project '$PAGES_PROJECT_NAME' not found in account. Create it first in Cloudflare Pages UI (same account) or fix PAGES_PROJECT_NAME secret." >&2
            exit 1
          fi
          echo "Confirmed target project '$PAGES_PROJECT_NAME' exists. Proceeding to deploy."
      - name: Deploy public/ to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          accountId: ${{ secrets.CF_ACCOUNT_ID }}
          projectName: ${{ secrets.PAGES_PROJECT_NAME }}
          directory: public
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          wranglerVersion: '3'
