openapi: 3.1.0
info:
  title: PokeQuant API
  version: 0.8.4
  description: |
    MVP API. Fields may add over time; removals are breaking. Use schema components.
    Public read endpoints include short-lived Cache-Control and ETag (conditional GET).
  Admin auth: x-admin-token supports current ADMIN_TOKEN and optional staged ADMIN_TOKEN_NEXT during rotation window.
servers:
  - url: https://pokequant.jonathanbarreneche.workers.dev
paths:
  /health:
    get:
      summary: Health and latest dates
      responses:
        '200': { description: OK }
  /api/universe:
    get:
      summary: Universe listing
      description: May return Cache-Control: public, max-age=60; supports conditional GET with ETag
      responses:
        '200':
          description: OK
          headers:
            Cache-Control: { schema: { type: string } }
            ETag: { schema: { type: string }, description: Strong ETag for base data signature }
          content:
            application/json:
              examples:
                sample:
                  value:
                    - { id: cardA, name: Charizard Holo, set_name: Base, rarity: Rare, types: fire|flying }
                    - { id: cardB, name: Pikachu, set_name: Jungle, rarity: Common }
        '304': { description: Not Modified }
  /api/cards:
    get:
      summary: Cards with latest signals
      description: May return Cache-Control: public, max-age=30; supports conditional GET with ETag
      responses:
        '200':
          description: List of cards with signals
          headers:
            Cache-Control: { schema: { type: string } }
            ETag: { schema: { type: string } }
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/CardWithSignal' }
        '304': { description: Not Modified }
  /api/movers:
    get:
      summary: Top movers
      description: May return Cache-Control: public, max-age=30; supports conditional GET with ETag
      parameters:
        - in: query
          name: dir
          schema: { type: string, enum: [up, down] }
        - in: query
          name: n
          schema: { type: integer, minimum: 1, maximum: 50 }
      responses:
        '200':
          description: OK
          headers:
            Cache-Control: { schema: { type: string } }
            ETag: { schema: { type: string } }
          content:
            application/json:
              examples:
                sample:
                  value:
                    - { id: cardA, pct_change_24h: 0.18, price_usd: 145.2 }
                    - { id: cardZ, pct_change_24h: -0.12, price_usd: 54.1 }
        '304': { description: Not Modified }
  /api/card:
    get:
      summary: Single card timeseries
      parameters:
        - in: query
          name: id
          required: true
          schema: { type: string }
        - in: query
          name: days
          schema: { type: integer }
      responses:
        '200':
          description: Card timeseries bundle
          content:
            application/json:
              schema: { $ref: '#/components/schemas/CardTimeseries' }
  /api/card/factors:
    get:
      summary: Card factor explainability snapshot
      description: Returns latest factor component values and normalized contribution weights for a card.
      parameters:
        - in: query
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/CardFactorExplain' }
  /research/card-csv:
    get:
      summary: Card CSV export
      responses: { '200': { description: CSV } }
  /admin/factor-returns:
    get:
      summary: Latest stored factor daily top-bottom quintile returns
      description: Returns list plus rolling aggregates (7d/30d compound, averages, Sharpe) under aggregates field.
  security: [ { AdminToken: [] } ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/FactorReturnsResponse' }
              examples:
                sample:
                  value:
                    ok: true
                    rows:
                      - { factor: ts7, ret: 0.0123, ret_7d: 0.045, ret_30d: 0.11 }
                      - { factor: mom90, ret: -0.004, ret_7d: 0.010, ret_30d: 0.072 }
                    aggregates: { count: 2, avg: 0.00415, avg_abs: 0.00815, sharpe_30d: 1.2, sharpe_7d: 0.9 }
  /admin/factor-returns/run:
    post:
      summary: Force recomputation of factor returns for latest date
  security: [ { AdminToken: [] } ]
      responses: { '200': { description: OK } }
  /admin/factor-risk:
    get:
      summary: Latest factor covariance/correlation pairs
      description: Returns factor pairwise covariance & correlation (rolling 60d window) for as_of date (query param optional, defaults today). pairs array includes factor_i, factor_j, cov, corr.
  security: [ { AdminToken: [] } ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/FactorRiskResponse' }
              examples:
                sample:
                  value:
                    ok: true
                    as_of: 2025-08-29
                    pairs:
                      - { factor_i: ts7, factor_j: ts7, cov: 0.0025, corr: 1 }
                      - { factor_i: ts7, factor_j: mom90, cov: 0.0003, corr: 0.25 }
                      - { factor_i: mom90, factor_j: mom90, cov: 0.0031, corr: 1 }
  /admin/factor-metrics:
    get:
      summary: Per-factor volatility & beta metrics
      description: Returns factor_metrics rows (vol, beta) for as_of date (query param optional, defaults today).
  security: [ { AdminToken: [] } ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/FactorMetricsResponse' }
              examples:
                sample:
                  value:
                    ok: true
                    as_of: 2025-08-29
                    metrics:
                      - { factor: ts7, vol: 0.18, beta: 0.95 }
                      - { factor: mom90, vol: 0.22, beta: 1.05 }
  /admin/factor-returns-smoothed:
    get:
      summary: Bayesian-smoothed factor returns
      description: Returns per-factor shrunken returns (ret_smoothed) for as_of date (query param optional, defaults today).
  security: [ { AdminToken: [] } ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/FactorReturnsSmoothedResponse' }
              examples:
                sample:
                  value:
                    ok: true
                    as_of: 2025-08-29
                    returns:
                      - { factor: ts7, ret: 0.0123, ret_smoothed: 0.0101 }
                      - { factor: mom90, ret: -0.004, ret_smoothed: 0.0012 }
  /admin/signal-quality:
    get:
      summary: Signal quality stability metrics
      description: Returns IC stability metrics (ic_mean, ic_vol, lag-1 autocorr, half-life) for factors at as_of date (query param optional, defaults today).
  security: [ { AdminToken: [] } ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/SignalQualityResponse' }
              examples:
                sample:
                  value:
                    ok: true
                    as_of: 2025-08-29
                    metrics:
                      - { factor: ts7, ic_mean: 0.045, ic_vol: 0.12, ic_autocorr_1d: 0.10, ic_half_life_days: 5 }
                      - { factor: mom90, ic_mean: 0.030, ic_vol: 0.11, ic_autocorr_1d: 0.05, ic_half_life_days: 4 }
  /admin/portfolio-pnl:
    get:
      summary: Portfolio daily PnL snapshots
      description: Returns portfolio_pnl rows (ret, turnover_cost, realized_pnl) filtered by optional portfolio_id and/or as_of.
  security: [ { AdminToken: [] } ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PortfolioPnlResponse' }
              examples:
                sample:
                  value:
                    ok: true
                    rows:
                      - { portfolio_id: p1, as_of: 2025-08-28, ret: 0.006, turnover_cost: 0.0002, realized_pnl: 12.3 }
                      - { portfolio_id: p1, as_of: 2025-08-29, ret: -0.003, turnover_cost: 0.0001, realized_pnl: 11.9 }
  /admin/factor-ic/summary:
    get:
      summary: Rolling IC performance summary
      description: Per-factor stats over full history (<=90d) plus trailing 30d and 7d windows: average IC, absolute average IC, hit rate (>0), and information ratio (annualized) with window-specific fields.
  security: [ { AdminToken: [] } ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/FactorIcSummaryResponse' }
              examples:
                sample:
                  value:
                    ok: true
                    rows:
                      - { factor: ts7, ic_avg: 0.042, ic_avg_abs: 0.050, ic_ir: 0.85, ic_hit: 0.62, ic_avg_30d: 0.038, ic_avg_abs_30d: 0.046, ic_ir_30d: 0.80, ic_hit_30d: 0.60, ic_avg_7d: 0.041, ic_avg_abs_7d: 0.049, ic_ir_7d: 0.78, ic_hit_7d: 0.57 }
                      - { factor: mom90, ic_avg: 0.030, ic_avg_abs: 0.044, ic_ir: 0.70, ic_hit: 0.58 }
  /admin/factor-performance:
    get:
      summary: Consolidated factor performance & suggested weights
      description: Combines recent factor returns and IC to produce per-factor performance metrics and normalized weight_suggest from trailing 30d absolute IC.
  security: [ { AdminToken: [] } ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/FactorPerformanceResponse' }
              examples:
                sample:
                  value:
                    ok: true
                    factors:
                      - { factor: ts7, ic_avg_30d: 0.038, ic_ir_30d: 0.80, ret_30d: 0.11, ret_smoothed: 0.0101, weight_suggest: 0.55 }
                      - { factor: mom90, ic_avg_30d: 0.028, ic_ir_30d: 0.60, ret_30d: 0.072, ret_smoothed: 0.0012, weight_suggest: 0.45 }
  /admin/portfolio-exposure/snapshot:
    post:
      summary: Force snapshot of portfolio factor exposure history for current latest components date
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/SimpleOkResponse' }
  security: [ { AdminToken: [] } ]
  /admin/portfolio-nav/snapshot:
    post:
      summary: Force portfolio NAV snapshot for latest prices
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/SimpleOkResponse' }
  security: [ { AdminToken: [] } ]
  /admin/portfolio/force-legacy:
    post:
      summary: Null secret_hash for a portfolio to force legacy plaintext auth (testing only)
      description: Admin-only test utility to simulate legacy auth usage; next authenticated portfolio request will increment portfolio.auth_legacy.
      security: [ { AdminToken: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ id ]
              properties:
                id: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ForceLegacyResponse' }
              examples:
                sample:
                  value: { ok: true, id: 'uuid', had_hash: true }
  /admin/test-insert:
    post:
      summary: (Test) Insert rows into allowlisted tables for test seeding
      responses: { '200': { description: OK } }
  /portfolio/exposure/history:
    get:
      summary: Portfolio factor exposure history (snapshots)
  security: [ { PortfolioAuth: [] } ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PortfolioExposureHistoryResponse' }
              examples:
                sample:
                  value:
                    ok: true
                    rows:
                      - { portfolio_id: p1, as_of: 2025-08-28, factor: ts7, exposure: 0.32 }
                      - { portfolio_id: p1, as_of: 2025-08-29, factor: ts7, exposure: 0.30 }
                      - { portfolio_id: p1, as_of: 2025-08-29, factor: mom90, exposure: 0.18 }
  /portfolio/attribution:
    get:
      summary: Portfolio performance attribution (factor contributions vs residual)
  security: [ { PortfolioAuth: [] } ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PortfolioAttributionResponse' }
              examples:
                sample:
                  value:
                    ok: true
                    rows:
                      - { portfolio_id: p1, as_of: 2025-08-29, factor: ts7, contribution: 0.004 }
                      - { portfolio_id: p1, as_of: 2025-08-29, factor: mom90, contribution: 0.002 }
                      - { portfolio_id: p1, as_of: 2025-08-29, factor: residual, contribution: -0.001 }
  /portfolio/pnl:
    get:
      summary: Portfolio daily PnL (authenticated)
      description: Returns per-day portfolio returns (ret) and realized components for authenticated portfolio (headers x-portfolio-id/secret). Optional days query (<=180).
  security: [ { PortfolioAuth: [] } ]
      responses: { '200': { description: OK } }
  /portfolio/scenario:
    post:
      summary: Portfolio scenario what-if factor exposures
      description: Computes hypothetical factor exposures if lots were adjusted (does not persist). Provide body with lots array and optional mode ('absolute' or 'delta').
      security: [ { PortfolioAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                mode: { type: string, enum: [absolute, delta] }
                lots:
                  type: array
                  items:
                    type: object
                    required: [ card_id, qty ]
                    properties:
                      card_id: { type: string }
                      qty: { type: number }
      responses:
        '200':
          description: OK
          content:
            application/json:
              examples:
                sample:
                  value:
                    ok: true
                    mode: absolute
                    as_of: 2025-08-30
                    current: { ts7: 0.12, ts30: 0.25, z_svi: 0.9, vol: 0.31, liquidity: 2.8, scarcity: 0.55, mom90: 0.04 }
                    scenario: { ts7: 0.20, ts30: 0.33, z_svi: 0.8, vol: 0.34, liquidity: 2.6, scarcity: 0.60, mom90: 0.06 }
                    deltas: { ts7: 0.08, ts30: 0.08, z_svi: -0.1, vol: 0.03 }
  /api/subscribe:
    post:
      summary: Subscribe email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string }
              required: [email]
      responses:
    '200': { description: OK, headers: { 'X-RateLimit-Limit': { schema: { type: integer } }, 'X-RateLimit-Remaining': { schema: { type: integer } }, 'X-RateLimit-Reset': { schema: { type: integer } } } }
    '429': { description: Rate limited, headers: { 'Retry-After': { schema: { type: integer } } }, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
  /api/sets:
    get:
      summary: List sets
      description: May return Cache-Control: public, max-age=300; supports conditional GET with ETag
      responses:
        '200': { description: OK, headers: { Cache-Control: { schema: { type: string } }, ETag: { schema: { type: string } } } }
          content:
            application/json:
              examples:
                sample:
                  value: [ { name: Base }, { name: Jungle } ]
        '304': { description: Not Modified }
  /api/rarities:
    get:
      summary: List rarities
      description: May return Cache-Control: public, max-age=300; supports conditional GET with ETag
      responses:
        '200': { description: OK, headers: { Cache-Control: { schema: { type: string } }, ETag: { schema: { type: string } } } }
          content:
            application/json:
              examples:
                sample:
                  value: [ { rarity: Common }, { rarity: Rare } ]
        '304': { description: Not Modified }
  /api/types:
    get:
      summary: List types
      description: May return Cache-Control: public, max-age=300; supports conditional GET with ETag
      responses:
        '200': { description: OK, headers: { Cache-Control: { schema: { type: string } }, ETag: { schema: { type: string } } } }
          content:
            application/json:
              examples:
                sample:
                  value: [ { type: fire }, { type: water } ]
        '304': { description: Not Modified }
  /api/search:
    get:
      summary: Search cards
      parameters:
        - in: query
          name: q
          schema: { type: string }
      responses:
    '200': { description: OK, headers: { 'X-RateLimit-Limit': { schema: { type: integer } }, 'X-RateLimit-Remaining': { schema: { type: integer } }, 'X-RateLimit-Reset': { schema: { type: integer } } } }
    '429': { description: Rate limited, headers: { 'Retry-After': { schema: { type: integer } } }, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
      '200':
        content:
          application/json:
            examples:
              sample:
                value:
                  - { id: cardA, name: Charizard Holo, rarity: Rare, score: 7.1, price_usd: 123.45 }
                  - { id: cardB, name: Pikachu, rarity: Common, score: 3.4, price_usd: 12.34 }
  /portfolio/create:
    post:
      summary: Create portfolio
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PortfolioCreateResponse' }
  /portfolio/add-lot:
    post:
      summary: Add portfolio lot
      security: [ { PortfolioAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/PortfolioLotAddRequest' }
            examples:
              sample:
                value: { card_id: card1, qty: 2, cost_usd: 12.5 }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PortfolioLotAddResponse' }
        '403': { description: Forbidden }
  /portfolio:
    get:
      summary: Get portfolio
      security: [ { PortfolioAuth: [] } ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PortfolioResponse' }
        '403': { description: Forbidden }
  /portfolio/export:
    get:
      summary: Export portfolio
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PortfolioExportResponse' }
  /portfolio/exposure:
    get:
      summary: Portfolio factor exposure (latest components)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PortfolioExposureLatestResponse' }
  /portfolio/targets:
    get:
      summary: List portfolio factor/asset targets
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  rows:
                    type: array
                    items: { type: object, properties: { kind: { type: string }, target_key: { type: string }, target_value: { type: number } }, required: [kind, target_key, target_value] }
                required: [ok, rows]
    post:
      summary: Upsert portfolio factor targets
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                factors: { type: object, additionalProperties: { type: number } }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/SimpleOkResponse' }
  /portfolio/orders:
    post:
      summary: Create portfolio optimization order (align targets)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PortfolioOrderCreateResponse' }
    get:
      summary: List recent portfolio orders
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PortfolioOrderListResponse' }
  /portfolio/orders/execute:
    post:
      summary: Execute previously created portfolio order (MVP no-op)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PortfolioOrderExecuteResponse' }
  /portfolio/delete-lot:
    post:
      summary: Delete a portfolio lot
      description: Remove a previously added lot by lot_id.
      security: [ { PortfolioAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/PortfolioLotDeleteRequest' }
            examples:
              sample: { value: { lot_id: 123e4567-e89b-12d3-a456-426614174000 } }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PortfolioLotDeleteResponse' }
        '403': { description: Forbidden }
  /portfolio/update-lot:
    post:
      summary: Update a portfolio lot
      description: Change quantity and/or cost basis for an existing lot.
      security: [ { PortfolioAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/PortfolioLotUpdateRequest' }
            examples:
              sample: { value: { lot_id: 123e4567-e89b-12d3-a456-426614174000, qty: 5, cost_usd: 42.5 } }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PortfolioLotUpdateResponse' }
        '403': { description: Forbidden }
  /portfolio/rotate-secret:
    post:
      summary: Rotate portfolio secret
      description: |
        Generates a new random secret for the specified portfolio. Requires current valid secret via headers.
        Response returns the new secret; client must persist it immediately. Old secret becomes invalid instantly.
      security: [ { PortfolioAuth: [] } ]
      responses:
        '200':
          description: OK (new secret issued)
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PortfolioRotateSecretResponse' }
              examples:
                sample: { value: { ok: true, id: portfolio123, secret: 5af0b4c9d2e14c0b9f3e77aa22b1c4d1 } }
        '403': { description: Forbidden }
  /alerts/create:
    post:
      summary: Create price alert
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/AlertCreateRequest' }
      responses:
    '200': { description: Created, headers: { 'X-RateLimit-Limit': { schema: { type: integer } }, 'X-RateLimit-Remaining': { schema: { type: integer } }, 'X-RateLimit-Reset': { schema: { type: integer } } }, content: { application/json: { schema: { $ref: '#/components/schemas/AlertCreateResponse' } } } }
    '400': { description: Bad Request, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
  '429': { description: Rate limited, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
  /alerts/deactivate:
    get:
      summary: Deactivate alert
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/SimpleOkResponse' }
  /alerts/snooze:
    post:
      summary: Snooze (suppress) alert firing for N minutes
      parameters:
        - in: query
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ minutes, token ]
              properties:
                minutes: { type: integer, minimum: 1, maximum: 10080, description: 'Suppression duration in minutes (max 7 days)' }
                token: { type: string, description: 'Manage token returned by /alerts/create' }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  id: { type: string }
                  suppressed_for_minutes: { type: integer }
                required: [ok, id, suppressed_for_minutes]
    post:
      summary: Deactivate alert (POST)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/SimpleOkResponse' }
  /ingest/trends:
    post:
      summary: Ingest SVI trends (secure)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/SimpleOkResponse' }
  /admin/run-fast:
    post:
      summary: Compute signals only
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/SimpleOkResponse' }
  /admin/run-now:
    post:
      summary: Full pipeline run
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/SimpleOkResponse' }
  /admin/metrics:
    get:
      summary: Recent metrics (admin)
      responses:
        '200':
          description: OK
          security: [ { AdminToken: [] } ]
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AdminMetricsResponse' }
              examples:
                sample:
                  value:
                    ok: true
                    rows: [ { d: 2025-08-29, metric: req.total, count: 123 }, { d: 2025-08-29, metric: error.alerts.invalid_threshold, count: 4 }, { d: 2025-08-29, metric: error_status.400, count: 6 }, { d: 2025-08-29, metric: webhook.sent, count: 5 }, { d: 2025-08-29, metric: webhook.retry_success, count: 2 }, { d: 2025-08-29, metric: webhook.error, count: 1 } ]
                    latency: [ { d: 2025-08-29, base_metric: sets, p50_ms: 20, p95_ms: 75 } ]
                    cache_hits: [ { d: 2025-08-29, metric: cache.hit.universe, count: 15 } ]
                    cache_hit_ratios: { universe: 0.65 }
                    slo_ratios:
                      api_cards: { good: 950, breach: 25, breach_ratio: 0.0256 }
                      api_universe: { good: 400, breach: 5, breach_ratio: 0.0123 }
                    email_metrics:
                      - { d: 2025-08-29, metric: email.retry, count: 2 }
                      - { d: 2025-08-29, metric: email.giveup, count: 1 }
                      - { d: 2025-08-29, metric: email.sent, count: 42 }
                    webhook_metrics:
                      - { d: 2025-08-29, metric: webhook.sent, count: 5 }
                      - { d: 2025-08-29, metric: webhook.retry_success, count: 2 }
                      - { d: 2025-08-29, metric: webhook.error, count: 1 }
                    additional_new_metrics:
                      - { d: 2025-08-29, metric: alert.escalation, count: 1 }
                      - { d: 2025-08-29, metric: ingest.scheduled_run, count: 3 }
  /admin/latency:
    get:
      summary: Latest latency snapshot (admin)
      description: Provides latest p50/p95 latency per tag only (single-day view).
      responses:
        '200':
          description: OK
      security: [ { AdminToken: [] } ]
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  rows:
                    type: array
                    items:
                      type: object
                      properties:
                        base_metric: { type: string }
                        p50_ms: { type: number, nullable: true }
                        p95_ms: { type: number, nullable: true }
                required: [ok, rows]
              examples:
                sample:
                  value:
                    ok: true
                    rows: [ { d: 2025-08-29, base_metric: sets, p50_ms: 20, p95_ms: 75 } ]
  /admin/latency-buckets:
    get:
      summary: Latency bucket histogram counts (admin)
      description: Returns per-tag latency bucket counts for today based on per-request histogram metrics latbucket.TAG.BUCKET (buckets: lt50, lt100, lt250, lt500, lt1000, gte1000).
      security: [ { AdminToken: [] } ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  buckets:
                    type: object
                    additionalProperties:
                      type: object
                      properties:
                        lt50: { type: integer, nullable: true }
                        lt100: { type: integer, nullable: true }
                        lt250: { type: integer, nullable: true }
                        lt500: { type: integer, nullable: true }
                        lt1000: { type: integer, nullable: true }
                        gte1000: { type: integer, nullable: true }
                      required: []
                required: [ok, buckets]
              examples:
                sample:
                  value:
                    ok: true
                    buckets:
                      sets: { lt50: 12, lt100: 3 }
                      rarities: { lt50: 15 }
  /admin/slo:
    get:
      summary: List dynamic SLO thresholds (admin)
      description: Returns configured per-route latency SLO thresholds (ms). Defaults to 250ms when not set.
      security: [ { AdminToken: [] } ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/SloConfigListResponse' }
              examples:
                sample:
                  value:
                    ok: true
                    rows:
                      - route: /api/cards
                        threshold_ms: 250
                        updated_at: '2025-08-30T12:00:00Z'
                      - route: /admin/alerts
                        threshold_ms: 400
                        updated_at: '2025-08-30T12:05:00Z'
  /admin/slo/set:
    post:
      summary: Upsert SLO threshold for a route (admin)
      description: Body accepts { route, threshold_ms }. Route can be a full path (e.g. /api/cards) or slug (api_cards).
      security: [ { AdminToken: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ route, threshold_ms ]
              properties:
                route: { type: string }
                threshold_ms: { type: integer, minimum: 10, maximum: 30000 }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/SloConfigUpsertResponse' }
              examples:
                sample:
                  value:
                    ok: true
                    row:
                      route: api_cards
                      threshold_ms: 180
                      updated_at: '2025-08-31T12:34:56Z'
  /admin/run-alerts:
    post:
      summary: Run alerts evaluation only
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/SimpleOkResponse' }
  security: [ { AdminToken: [] } ]
  /admin/alert-queue/send:
    post:
      summary: Process queued alert emails (mock send)
      description: Marks up to 50 queued alert notifications as sent. Simulation only (no external email delivery in MVP).
      security: [ { AdminToken: [] } ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AlertQueueProcessResponse' }
  /admin/email/deliveries:
    get:
      summary: List alert email delivery attempts (admin)
      description: Returns recent email delivery attempt log rows (success & failure) ordered by created_at desc. Optional query params: limit (<=200, default 50), email filter.
      security: [ { AdminToken: [] } ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/EmailDeliveriesResponse' }
  /admin/webhooks:
    get:
      summary: List webhook endpoints (admin)
      description: |
        Returns registered webhook endpoints for alert firing. Optional query params: active (0|1).
        Webhook signing: when secret set, requests include headers x-signature (hex HMAC SHA256), x-signature-ts (unix seconds), x-signature-nonce (uuid). Signature input format: `${ts}.${nonce}.${JSON payload}`.
  Backoff: exponential (base 250ms) with jitter recorded per attempt in planned_backoff_ms (metadata only in current worker runtime; attempts occur synchronously for test determinism).
      security: [ { AdminToken: [] } ]
      responses: { '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/WebhookEndpointsResponse' } } } } }
    post:
      summary: Upsert webhook endpoint (admin)
      description: Body: { url, active? } — inserts new or updates existing by URL.
      security: [ { AdminToken: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [url]
              properties:
                url: { type: string }
                active: { type: integer, nullable: true }
      responses: { '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/SimpleOkResponse' } } } } }
  /admin/webhooks/delete:
        '400':
          description: Invalid body
          content:
            application/json:
              examples:
                invalid:
                  value:
                    ok: false
                    error: invalid_body
    post:
      summary: Delete webhook endpoint (admin)
      description: Body: { url }
      security: [ { AdminToken: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [url]
              properties:
                url: { type: string }
      responses: { '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/SimpleOkResponse' } } } } }
  /admin/webhooks/deliveries:
    get:
      summary: List webhook delivery simulation log (admin)
      description: |
        Returns recent webhook deliveries produced when alerts fire.
        Optional query params: limit (<=200, default 50), url filter.
        Simulation controls (non-production/testing): include ?fail=N (1-3) in the endpoint URL to force the first N attempts to fail then succeed, or ?always_fail=1 to force all attempts (max 3) to fail. Ignored when WEBHOOK_REAL_SEND=1.
      security: [ { AdminToken: [] } ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/WebhookDeliveriesResponse' }
              examples:
                sample:
                  value:
                    ok: true
                    rows:
                      - { id: d1, webhook_id: wh1, event: alert.fired, ok: 0, status: 0, error: sim_fail, attempt: 1, duration_ms: null, created_at: 2025-08-29T12:00:00Z }
                      - { id: d2, webhook_id: wh1, event: alert.fired, ok: 0, status: 0, error: sim_fail, attempt: 2, duration_ms: null, created_at: 2025-08-29T12:00:00Z }
                      - { id: d3, webhook_id: wh1, event: alert.fired, ok: 1, status: 200, error: null, attempt: 3, duration_ms: 5, created_at: 2025-08-29T12:00:00Z }
  /admin/webhooks/verify:
    get:
      summary: Verify webhook nonce replay (admin)
      description: Returns seen=true if provided nonce already exists in webhook_deliveries table. Useful for validating idempotency and detecting replays.
      security: [ { AdminToken: [] } ]
      parameters:
        - in: query
          name: nonce
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              examples:
                sample:
                  value: { ok: true, nonce: 'uuid', seen: true }
  /admin/webhooks/redeliver:
    post:
      summary: Manually redeliver a prior webhook payload (admin)
      description: Single immediate attempt to resend the original payload of a prior delivery (body: { delivery_id }). Creates a new delivery row with redeliver=1 and fresh nonce/signature.
      security: [ { AdminToken: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ delivery_id ]
              properties:
                delivery_id: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  id: { type: string }
                  status: { type: integer }
                  ok_flag: { type: boolean }
                  redeliver_of: { type: string }
                required: [ ok, id, redeliver_of ]
              examples:
                sample:
                  value:
                    ok: true
                    id: 'new-delivery-uuid'
                    status: 200
                    ok_flag: true
                    redeliver_of: 'original-delivery-uuid'
        '404':
          description: Delivery not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  error: { type: string }
                required: [ ok, error ]
              examples:
                missing:
                  value:
                    ok: false
                    error: delivery_not_found
  /admin/migrations:
    get:
      summary: List applied migrations (admin)
      security: [ { AdminToken: [] } ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  migrations:
                    type: array
                    items:
                      type: object
                      properties:
                        id: { type: string }
                        name: { type: string }
                        applied_at: { type: string, format: date-time }
                      required: [id, name, applied_at]
                required: [ok, migrations]
  /admin/version:
    get:
      summary: Version metadata (admin)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/VersionInfo' }
      security: [ { AdminToken: [] } ]
  /admin/pipeline/runs:
    get:
      summary: Recent pipeline run records (admin)
      description: Returns last 20 pipeline run records from pipeline_runs table (status running|completed|error). Useful to detect overlaps/skips.
      security: [ { AdminToken: [] } ]
      responses:
        '200': { description: OK }
  /admin/integrity:
    get:
      summary: Data integrity snapshot (admin)
      description: Coverage counts, latest dates, recent gap heuristics, and staleness flags.
      security: [ { AdminToken: [] } ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  flags: { type: object, additionalProperties: { type: boolean } }
                  coverage: { type: object, additionalProperties: { type: integer } }
                  latest: { type: object, additionalProperties: { type: string, format: date } }
                required: [ok]
  /admin/factor-weights:
    get:
      summary: List factor weights (admin)
      security: [ { AdminToken: [] } ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  weights:
                    type: array
                    items:
                      type: object
                      properties:
                        factor: { type: string }
                        weight: { type: number }
                        auto: { type: boolean, nullable: true }
                      required: [factor, weight]
                required: [ok, weights]
  /admin/factor-weights/auto:
    post:
      summary: Auto derive factor weights from trailing IC (admin)
      security: [ { AdminToken: [] } ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/SimpleOkResponse' }
  /admin/factor-ic:
    get:
      summary: List factor IC history (admin)
      security: [ { AdminToken: [] } ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  rows:
                    type: array
                    items:
                      type: object
                      properties:
                        d: { type: string, format: date }
                        factor: { type: string }
                        ic: { type: number, nullable: true }
                      required: [d, factor]
                required: [ok, rows]
  security: [ { AdminToken: [] } ]
  /admin/factor-ic/run:
    post:
      summary: Compute and store latest factor IC (admin)
      responses: { '200': { description: OK } }
  security: [ { AdminToken: [] } ]
  /admin/backtests:
    get:
      summary: List recent backtests (admin)
      responses: { '200': { description: OK } }
                    rows:
                      - { d: 2025-08-29, metric: req_total, count: 123 }
                      - { d: 2025-08-29, metric: alert.queued, count: 3 }
                      - { d: 2025-08-29, metric: alert.sent, count: 2 }
                      - { d: 2025-08-29, metric: portfolio.auth_legacy, count: 1 }
                      - { d: 2025-08-29, metric: email.sent, count: 2 }
                      - { d: 2025-08-29, metric: email.send_error, count: 1 }
                      - { d: 2025-08-29, metric: email.no_provider, count: 5 }
                      - { d: 2025-08-29, metric: email.retry, count: 2 }
                      - { d: 2025-08-29, metric: email.giveup, count: 1 }
      summary: Run simple quintile spread backtest (admin)
      responses: { '200': { description: OK } }
  security: [ { AdminToken: [] } ]
  /admin/factors:
    get:
      summary: List factor configuration (admin)
      responses: { '200': { description: OK } }
    post:
      summary: Upsert factor configuration entry (admin)
      responses: { '200': { description: OK } }
  security: [ { AdminToken: [] } ]
  /admin/factors/toggle:
    post:
      summary: Toggle factor enabled flag (admin)
      responses: { '200': { description: OK } }
  security: [ { AdminToken: [] } ]
  /admin/factors/delete:
    post:
      summary: Delete factor from configuration (admin)
      responses: { '200': { description: OK } }
  security: [ { AdminToken: [] } ]
  /admin/retention:
    post:
      summary: Run data retention purge (admin)
      description: |
        Applies retention windows to historical tables and returns deleted row counts per table.
        Supports optional body windows override: { "windows": { "backtests": 15, "metrics_daily": 10 } } (0-365 days each).
        Also supports environment variable overrides RETENTION_<TABLE>_DAYS (e.g. RETENTION_BACKTESTS_DAYS=14).
      responses:
        '200':
          description: OK
  security: [ { AdminToken: [] } ]
          content:
            application/json:
              schema: { $ref: '#/components/schemas/RetentionResult' }
              examples:
                sample:
                  value:
                    ok: true
                    deleted: { metrics_daily: 42, factor_returns: 0 }
                    ms: 18
                    overrides: { metrics_daily: 10 }
  /admin/backtests/{id}:
    get:
      summary: Get backtest details (admin)
      responses: { '200': { description: OK } }
  security: [ { AdminToken: [] } ]
  /admin/snapshot:
    get:
      summary: Consolidated snapshot (admin)
      responses: { '200': { description: OK } }
  security: [ { AdminToken: [] } ]
  /admin/anomalies:
    get:
      summary: List recent anomalies (admin)
      description: Optional query params: status=open|resolved filter. Supports pagination with limit (<=200) and before_created_at cursor (exclusive) on created_at descending.
      parameters:
        - in: query
          name: status
          schema: { type: string, enum: [open, resolved] }
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 200 }
        - in: query
        '400':
          description: Validation error
          content:
            application/json:
              examples:
                bad_threshold:
                  value:
                    ok: false
                    error: invalid_threshold
                route_required:
                  value:
                    ok: false
                    error: route_required
          name: before_created_at
          schema: { type: string, description: 'Cursor: fetch rows with created_at < this ISO timestamp' }
      responses: { '200': { description: OK } }
  security: [ { AdminToken: [] } ]
  /admin/anomalies/resolve:
    post:
      summary: Resolve or classify an anomaly (admin)
      description: Actions: ack, dismiss, ignore. Body: { id, action, note? }
      responses: { '200': { description: OK } }
  security: [ { AdminToken: [] } ]
  /admin/portfolio-nav:
    get:
      summary: Portfolio NAV history (admin)
      responses: { '200': { description: OK } }
  security: [ { AdminToken: [] } ]
  /admin/backfill:
    get:
      summary: List recent backfill jobs (admin)
      description: Supports pagination with limit (<=100, default 50) and before_created_at cursor on created_at descending.
      parameters:
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 100 }
        - in: query
          name: before_created_at
          schema: { type: string }
      responses: { '200': { description: OK } }
    post:
      summary: Create backfill job (admin)
      responses: { '200': { description: OK } }
  security: [ { AdminToken: [] } ]
  /admin/backfill/{id}:
    get:
      summary: Backfill job detail (admin)
      responses: { '200': { description: OK } }
  security: [ { AdminToken: [] } ]
  /admin/ingestion/provenance:
    get:
      summary: List ingestion provenance records (admin)
  description: Optional query params: dataset, source, status, limit (<=500)
      responses: { '200': { description: OK } }
  security: [ { AdminToken: [] } ]
  /admin/ingest/prices:
    post:
      summary: Mock external price ingestion (admin)
      description: Inserts deterministic pseudo price history for recent days (default 3, max 30) and records provenance with source=external-mock.
      responses: { '200': { description: OK } }
  security: [ { IngestToken: [] } ]
  /admin/ingestion/config:
    get:
      summary: List ingestion configuration entries (admin)
      responses: { '200': { description: OK } }
    post:
      summary: Upsert ingestion configuration entry (admin)
      description: Body: { dataset, source, cursor?, enabled?, meta? }
      responses: { '200': { description: OK } }
  security: [ { AdminToken: [] } ]
  /admin/ingestion/run:
    post:
      summary: Run incremental ingestion for enabled config entries (admin)
      description: Advances cursor per (dataset,source) and records provenance; currently supports prices_daily only (deterministic pseudo data scaffold).
      responses: { '200': { description: OK } }
  security: [ { AdminToken: [] } ]
  /admin/ingestion-schedule:
    get:
      summary: List ingestion schedule entries (admin)
      description: Returns configured dataset frequencies and last_run_at timestamps.
      responses:
        '200': { description: OK }
    post:
      summary: Upsert ingestion schedule entry (admin)
      description: Body: { dataset, frequency_minutes }
      responses: { '200': { description: OK } }
  security: [ { AdminToken: [] } ]
  /admin/ingestion-schedule/run-due:
    post:
      summary: Run due ingestion schedules (admin)
      description: |
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/RedeliverResponse' }
              examples:
                sample:
                  value:
                    ok: true
                    id: 'new-delivery-uuid'
                    status: 200
                    ok_flag: true
                    redeliver_of: 'original-delivery-uuid'
          content:
            application/json:
              schema:
                type: object
  /admin/retention/config:
    get:
      summary: List retention configuration entries (admin)
      description: Returns persisted override windows (table_name, days, updated_at).
      responses: { '200': { description: OK } }
    post:
      summary: Upsert retention configuration entry (admin)
      description: Body: { table, days } where table in [backtests, mutation_audit, anomalies, metrics_daily, data_completeness]; days 0-365.
      responses: { '200': { description: OK } }
  security: [ { AdminToken: [] } ]
                properties:
                  ok: { type: boolean }
                  rows:
                    type: array
                    items:
                      type: object
                      properties:
                        id: { type: string }
                        email: { type: string }
                        card_id: { type: string }
                        kind: { type: string }
                        active: { type: integer }
                        threshold: { type: number }
                        suppressed_until: { type: string, nullable: true }
                        last_fired_at: { type: string, nullable: true }
                        fired_count: { type: integer, nullable: true }
                      required: [id, email, card_id, kind, active]
                required: [ok, rows]
  security: [ { AdminToken: [] } ]
  /admin/alerts/stats:
    get:
      summary: Alert statistics (admin)
      description: Counts and escalation buckets (fired_count >= 5/10/25).
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  total: { type: integer }
                  active: { type: integer }
                  suppressed: { type: integer }
                  active_unsuppressed: { type: integer }
                  escalation:
                    type: object
                    properties:
                      ge5: { type: integer }
                      ge10: { type: integer }
                      ge25: { type: integer }
                    required: [ge5, ge10, ge25]
                required: [ok, total]
  security: [ { AdminToken: [] } ]
  /portfolio/orders/detail:
    get:
      summary: Portfolio order detail (authenticated)
      description: Returns optimization order with stored suggestions and executed_trades.
      parameters:
        - in: query
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PortfolioOrderDetailResponse' }
        '403': { description: Forbidden }
  /admin/audit:
    get:
      summary: List mutation audit trail entries (admin)
      description: Optional query params: resource, action, actor_type, resource_id, before_ts (pagination), limit (<=500)
      responses: { '200': { description: OK } }
  security: [ { AdminToken: [] } ]
  /admin/audit/stats:
    get:
      summary: Audit action/resource frequency stats
      description: Aggregated counts over trailing hours window (default 24, max 168). Params: hours.
      responses: { '200': { description: OK } }
  security: [ { AdminToken: [] } ]
  /admin/factor-correlations:
    get:
      summary: Rolling factor return correlation matrix
      description: Computes Pearson correlations of daily factor_returns over trailing days window (default 60, max 180). Returns matrix and avg_abs_corr.
      responses: { '200': { description: OK } }
  security: [ { AdminToken: [] } ]
components:
  schemas:
    SloConfigRow:
      type: object
      properties:
        route: { type: string }
        threshold_ms: { type: integer }
        updated_at: { type: string, nullable: true }
      required: [route, threshold_ms]
    SloConfigListResponse:
      type: object
      properties:
        ok: { type: boolean }
        rows:
          type: array
          items: { $ref: '#/components/schemas/SloConfigRow' }
      required: [ ok, rows ]
    SloConfigUpsertResponse:
      type: object
      properties:
        ok: { type: boolean }
        row: { $ref: '#/components/schemas/SloConfigRow' }
      required: [ ok ]
    RedeliverResponse:
      type: object
      properties:
        ok: { type: boolean }
        id: { type: string }
        status: { type: integer }
        ok_flag: { type: boolean }
        redeliver_of: { type: string }
      required: [ ok, id, redeliver_of ]
    PortfolioLot:
      type: object
      properties:
        lot_id: { type: string }
        card_id: { type: string }
        qty: { type: number }
        cost_usd: { type: number }
        acquired_at: { type: string, nullable: true }
        price_usd: { type: number, nullable: true }
      required: [lot_id, card_id, qty]
    PortfolioResponse:
      type: object
      properties:
        ok: { type: boolean }
        totals:
          type: object
          properties:
            market_value: { type: number }
            cost_basis: { type: number }
            unrealized: { type: number }
        rows:
          type: array
          items: { $ref: '#/components/schemas/PortfolioLot' }
      required: [ok, rows]
    PortfolioLotAddRequest:
      type: object
      properties:
        card_id: { type: string }
        qty: { type: number }
        cost_usd: { type: number }
        acquired_at: { type: string, nullable: true }
      required: [card_id, qty, cost_usd]
    PortfolioLotAddResponse:
      type: object
      properties:
        ok: { type: boolean }
        lot_id: { type: string }
      required: [ok, lot_id]
    PortfolioLotDeleteRequest:
      type: object
      properties:
        lot_id: { type: string }
      required: [lot_id]
    PortfolioLotDeleteResponse:
      type: object
      properties:
        ok: { type: boolean }
        deleted: { type: integer }
      required: [ok, deleted]
    PortfolioLotUpdateRequest:
      type: object
      properties:
        lot_id: { type: string }
        qty: { type: number, nullable: true }
        cost_usd: { type: number, nullable: true }
      required: [lot_id]
    PortfolioLotUpdateResponse:
      type: object
      properties:
        ok: { type: boolean }
        updated: { type: integer }
      required: [ok, updated]
    PortfolioRotateSecretResponse:
      type: object
      properties:
        ok: { type: boolean }
        id: { type: string }
        secret: { type: string }
      required: [ok, id, secret]
    PortfolioCreateResponse:
      type: object
      properties:
        id: { type: string }
        secret: { type: string }
      required: [id, secret]
    PortfolioExportResponse:
      type: object
      properties:
        ok: { type: boolean }
        portfolio_id: { type: string }
        lots:
          type: array
          items: { $ref: '#/components/schemas/PortfolioLot' }
      required: [ok, portfolio_id, lots]
    ForceLegacyResponse:
      type: object
      properties:
        ok: { type: boolean }
        id: { type: string }
        had_hash: { type: boolean }
      required: [ok, id, had_hash]
    PortfolioExposureLatestResponse:
      type: object
      description: Latest factor exposure snapshot for a portfolio keyed by factor identifier
      properties:
        ok: { type: boolean }
        as_of: { type: string, format: date }
        portfolio_id: { type: string }
        exposures:
          type: object
          additionalProperties:
            type: number
      required: [ok, as_of, portfolio_id, exposures]
    AlertQueueProcessResponse:
      type: object
      properties:
        ok: { type: boolean }
        processed: { type: integer }
      required: [ok, processed]
    SimpleOkResponse:
      type: object
      properties:
        ok: { type: boolean }
      required: [ok]
    RetentionResponse:
      type: object
      properties:
        ok: { type: boolean }
        deleted: { type: object, additionalProperties: { type: integer } }
        ms: { type: integer }
      required: [ok, deleted]
    PortfolioOrderCreateResponse:
      type: object
      properties:
        ok: { type: boolean }
        id: { type: string }
        objective: { type: string }
        suggestions:
          type: object
          properties:
            factor_deltas: { type: object, additionalProperties: { type: number } }
            generated_at: { type: string, format: date-time }
            trades: { type: array, items: { type: object } }
          required: [factor_deltas, generated_at, trades]
      required: [ok, id, objective, suggestions]
    PortfolioOrderListResponse:
      type: object
      properties:
        ok: { type: boolean }
        rows:
          type: array
          items:
            type: object
            properties:
              id: { type: string }
              created_at: { type: string }
              status: { type: string }
              objective: { type: string }
              executed_at: { type: string, nullable: true }
            required: [id, created_at, status, objective]
      required: [ok, rows]
    PortfolioOrderExecuteResponse:
      type: object
      properties:
        ok: { type: boolean }
        id: { type: string }
        status: { type: string }
      required: [ok, id, status]
  securitySchemes:
    AdminToken:
      type: apiKey
      in: header
      name: x-admin-token
      description: Static admin token (env ADMIN_TOKEN).
    IngestToken:
      type: apiKey
      in: header
      name: x-ingest-token
      description: Token required for secured ingestion endpoint.
    PortfolioAuth:
      type: apiKey
      in: header
      name: x-portfolio-secret
      description: Per-portfolio secret; must pair with x-portfolio-id.
    Error:
      type: object
      properties:
        ok: { type: boolean, const: false }
        error: { type: string }
      required: [ok, error]
    CardBase:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        set_name: { type: string }
        rarity: { type: string }
        image_url: { type: string, nullable: true }
        types: { type: string, nullable: true, description: 'Pipe-delimited types' }
      required: [id, name]
    FactorReturnsRow:
      type: object
      properties:
        factor: { type: string }
        ret: { type: number }
        ret_7d: { type: number, nullable: true }
        ret_30d: { type: number, nullable: true }
      required: [factor, ret]
    FactorReturnsAggregates:
      type: object
      properties:
        count: { type: integer }
        avg: { type: number, nullable: true }
        avg_abs: { type: number, nullable: true }
        sharpe_30d: { type: number, nullable: true }
        sharpe_7d: { type: number, nullable: true }
      required: [count]
    FactorReturnsResponse:
      type: object
      properties:
        ok: { type: boolean }
        rows: { type: array, items: { $ref: '#/components/schemas/FactorReturnsRow' } }
        aggregates: { $ref: '#/components/schemas/FactorReturnsAggregates' }
      required: [ok, rows]
    FactorRiskResponse:
      type: object
      properties:
        ok: { type: boolean }
        as_of: { type: string, format: date }
        pairs: { type: array, items: { $ref: '#/components/schemas/FactorRiskPair' } }
      required: [ok, as_of, pairs]
    FactorMetricRow:
      type: object
      properties:
        factor: { type: string }
        vol: { type: number }
        beta: { type: number }
      required: [factor, vol, beta]
    FactorMetricsResponse:
      type: object
      properties:
        ok: { type: boolean }
        as_of: { type: string, format: date }
        metrics: { type: array, items: { $ref: '#/components/schemas/FactorMetricRow' } }
      required: [ok, as_of, metrics]
    FactorReturnsSmoothedRow:
      type: object
      properties:
        factor: { type: string }
        ret: { type: number }
        ret_smoothed: { type: number }
      required: [factor, ret, ret_smoothed]
    FactorReturnsSmoothedResponse:
      type: object
      properties:
        ok: { type: boolean }
        as_of: { type: string, format: date }
        returns: { type: array, items: { $ref: '#/components/schemas/FactorReturnsSmoothedRow' } }
      required: [ok, as_of, returns]
    SignalQualityRow:
      type: object
      properties:
        factor: { type: string }
        ic_mean: { type: number }
        ic_vol: { type: number }
        ic_autocorr_1d: { type: number }
        ic_half_life_days: { type: number }
      required: [factor, ic_mean]
    SignalQualityResponse:
      type: object
      properties:
        ok: { type: boolean }
        as_of: { type: string, format: date }
        metrics: { type: array, items: { $ref: '#/components/schemas/SignalQualityRow' } }
      required: [ok, as_of, metrics]
    FactorIcSummaryRow:
      type: object
      properties:
        factor: { type: string }
        ic_avg: { type: number, nullable: true }
        ic_avg_abs: { type: number, nullable: true }
        ic_ir: { type: number, nullable: true }
        ic_hit: { type: number, nullable: true }
        ic_avg_30d: { type: number, nullable: true }
        ic_avg_abs_30d: { type: number, nullable: true }
        ic_ir_30d: { type: number, nullable: true }
        ic_hit_30d: { type: number, nullable: true }
        ic_avg_7d: { type: number, nullable: true }
        ic_avg_abs_7d: { type: number, nullable: true }
        ic_ir_7d: { type: number, nullable: true }
        ic_hit_7d: { type: number, nullable: true }
      required: [factor]
    FactorIcSummaryResponse:
      type: object
      properties:
        ok: { type: boolean }
        rows: { type: array, items: { $ref: '#/components/schemas/FactorIcSummaryRow' } }
      required: [ok, rows]
    FactorPerformanceRow:
      type: object
      properties:
        factor: { type: string }
        ic_avg_30d: { type: number, nullable: true }
        ic_ir_30d: { type: number, nullable: true }
        ret_30d: { type: number, nullable: true }
        ret_smoothed: { type: number, nullable: true }
        weight_suggest: { type: number, nullable: true }
      required: [factor]
    FactorPerformanceResponse:
      type: object
      properties:
        ok: { type: boolean }
        factors: { type: array, items: { $ref: '#/components/schemas/FactorPerformanceRow' } }
      required: [ok, factors]
    PortfolioPnlRow:
      type: object
      properties:
        portfolio_id: { type: string }
        as_of: { type: string, format: date }
        ret: { type: number }
  benchmark_ret: { type: number, nullable: true, description: 'Benchmark return for the same day (e.g., equal-weight portfolio baseline)' }
  alpha: { type: number, nullable: true, description: 'Excess return vs benchmark (ret - benchmark_ret)' }
        turnover_cost: { type: number, nullable: true }
        realized_pnl: { type: number, nullable: true }
      required: [portfolio_id, as_of, ret]
    PortfolioPnlResponse:
      type: object
      properties:
        ok: { type: boolean }
        rows: { type: array, items: { $ref: '#/components/schemas/PortfolioPnlRow' } }
      required: [ok, rows]
    PortfolioExposureHistoryRow:
      type: object
      properties:
        portfolio_id: { type: string }
        as_of: { type: string, format: date }
        factor: { type: string }
        exposure: { type: number }
      required: [portfolio_id, as_of, factor, exposure]
    PortfolioExposureHistoryResponse:
      type: object
      properties:
        ok: { type: boolean }
        rows: { type: array, items: { $ref: '#/components/schemas/PortfolioExposureHistoryRow' } }
      required: [ok, rows]
    PortfolioAttributionRow:
      type: object
      properties:
        portfolio_id: { type: string }
        as_of: { type: string, format: date }
        factor: { type: string }
        contribution: { type: number }
      required: [portfolio_id, as_of, factor, contribution]
    PortfolioAttributionResponse:
      type: object
      properties:
        ok: { type: boolean }
        rows: { type: array, items: { $ref: '#/components/schemas/PortfolioAttributionRow' } }
      required: [ok, rows]
    CardWithSignal:
      allOf:
        - $ref: '#/components/schemas/CardBase'
        - type: object
          properties:
            signal: { type: string, nullable: true }
            score: { type: number, nullable: true }
            price_usd: { type: number, nullable: true }
            price_eur: { type: number, nullable: true }
    SignalPoint:
      type: object
      properties:
        d: { type: string, description: 'ISO date' }
        signal: { type: string, nullable: true }
        score: { type: number, nullable: true }
        edge_z: { type: number, nullable: true }
        exp_ret: { type: number, nullable: true }
        exp_sd: { type: number, nullable: true }
      required: [d]
    PricePoint:
      type: object
      properties:
        d: { type: string }
        usd: { type: number, nullable: true }
        eur: { type: number, nullable: true }
      required: [d]
    SviPoint:
      type: object
      properties:
        d: { type: string }
        svi: { type: integer, nullable: true }
      required: [d]
    ComponentPoint:
      type: object
      properties:
        d: { type: string }
        ts7: { type: number, nullable: true }
        ts30: { type: number, nullable: true }
        dd: { type: number, nullable: true }
        vol: { type: number, nullable: true }
        z_svi: { type: number, nullable: true }
      required: [d]
    CardTimeseries:
      type: object
      properties:
        ok: { type: boolean }
        card: { $ref: '#/components/schemas/CardBase' }
        prices: { type: array, items: { $ref: '#/components/schemas/PricePoint' } }
        signals: { type: array, items: { $ref: '#/components/schemas/SignalPoint' } }
        svi: { type: array, items: { $ref: '#/components/schemas/SviPoint' } }
        components: { type: array, items: { $ref: '#/components/schemas/ComponentPoint' } }
      required: [ok]
    CardFactorExplain:
      type: object
      properties:
        ok: { type: boolean }
        card_id: { type: string }
        as_of: { type: string, nullable: true }
        score: { type: number, nullable: true }
        signal: { type: string, nullable: true }
        factors:
          type: object
          additionalProperties: { type: number }
        contributions:
          type: object
          additionalProperties: { type: number }
      required: [ok, card_id]
    AlertCreateRequest:
      type: object
      properties:
        email: { type: string }
        card_id: { type: string }
        kind: { type: string, enum: [price_below, price_above] }
        threshold: { type: number }
  snooze_minutes: { type: integer, nullable: true, description: 'Optional initial suppression window in minutes' }
      required: [email, card_id, threshold]
    AlertCreateResponse:
      type: object
      properties:
        ok: { type: boolean }
        id: { type: string }
        manage_token: { type: string }
        manage_url: { type: string }
        suppressed_until: { type: string, nullable: true }
        fired_count: { type: integer }
      required: [ok, id, manage_token, manage_url]
    PortfolioOrderDetailResponse:
      type: object
      properties:
        ok: { type: boolean }
        id: { type: string }
        status: { type: string }
        objective: { type: string }
        created_at: { type: string }
        executed_at: { type: string, nullable: true }
        suggestions:
          type: object
          nullable: true
          properties:
            factor_deltas: { type: object, additionalProperties: { type: number } }
            generated_at: { type: string, format: date-time }
            trades: { type: array, items: { type: object } }
        executed_trades:
          type: array
          nullable: true
          items: { type: object }
      required: [ok, id, status, objective, created_at]
    FactorRiskPair:
      type: object
      properties:
        factor_i: { type: string }
        factor_j: { type: string }
        cov: { type: number, nullable: true }
        corr: { type: number, nullable: true }
      required: [factor_i, factor_j]
    FactorMetric:
      type: object
      properties:
        as_of: { type: string }
        factor: { type: string }
        vol: { type: number, nullable: true }
        beta: { type: number, nullable: true }
      required: [as_of, factor]
    FactorReturnSmoothed:
      type: object
      properties:
        as_of: { type: string }
        factor: { type: string }
        ret_smoothed: { type: number, nullable: true }
      required: [as_of, factor]
    SignalQualityMetric:
      type: object
      properties:
        as_of: { type: string }
        factor: { type: string }
        ic_mean: { type: number, nullable: true }
        ic_vol: { type: number, nullable: true }
        ic_ir: { type: number, nullable: true }
        ic_half_life: { type: number, nullable: true }
      required: [as_of, factor]
    PortfolioPnlRow:
      type: object
      properties:
        portfolio_id: { type: string }
        as_of: { type: string }
        ret: { type: number, nullable: true }
        benchmark_ret: { type: number, nullable: true }
        alpha: { type: number, nullable: true }
        realized_pnl: { type: number, nullable: true }
        turnover_cost: { type: number, nullable: true }
      required: [portfolio_id, as_of]
    EmailDeliveryRow:
      type: object
      properties:
        id: { type: string }
        email: { type: string }
        queued_id: { type: string }
        subject: { type: string }
        provider: { type: string }
        ok: { type: integer }
        error: { type: string, nullable: true }
        attempt: { type: integer }
        created_at: { type: string }
        sent_at: { type: string, nullable: true }
        provider_message_id: { type: string, nullable: true }
  provider_error_code: { type: string, nullable: true, description: 'Provider-classified error/bounce code if available' }
      required: [id, email, queued_id, ok, attempt, created_at]
    EmailDeliveriesResponse:
      type: object
      properties:
        ok: { type: boolean }
        rows: { type: array, items: { $ref: '#/components/schemas/EmailDeliveryRow' } }
      required: [ok, rows]
    WebhookEndpointRow:
      type: object
      properties:
        id: { type: string }
        url: { type: string }
        active: { type: integer }
        created_at: { type: string }
        updated_at: { type: string, nullable: true }
      required: [id, url, active, created_at]
    WebhookDeliveryRow:
      type: object
      properties:
        id: { type: string }
        webhook_id: { type: string }
        event: { type: string }
        ok: { type: integer }
        status: { type: integer, nullable: true, description: 'HTTP status code if real send attempted' }
        error: { type: string, nullable: true }
        attempt: { type: integer, nullable: true }
        duration_ms: { type: integer, nullable: true }
        created_at: { type: string }
  nonce: { type: string, nullable: true, description: 'Per-attempt unique nonce included in signature inputs for replay protection' }
  planned_backoff_ms: { type: integer, nullable: true, description: 'Recorded (not waited) exponential jitter backoff for this attempt' }
      required: [id, webhook_id, event, created_at]
    WebhookEndpointsResponse:
      type: object
      properties:
        ok: { type: boolean }
        rows: { type: array, items: { $ref: '#/components/schemas/WebhookEndpointRow' } }
      required: [ok, rows]
    WebhookDeliveriesResponse:
      type: object
      properties:
        ok: { type: boolean }
        rows: { type: array, items: { $ref: '#/components/schemas/WebhookDeliveryRow' } }
      required: [ok, rows]
    VersionInfo:
      type: object
      properties:
        ok: { type: boolean }
        version: { type: string }
      required: [ok, version]
    MetricRow:
      type: object
      properties:
        d: { type: string }
        metric: { type: string }
        count: { type: integer }
      required: [d, metric, count]
    LatencyMetric:
      type: object
      properties:
        d: { type: string }
        base_metric: { type: string }
        p50_ms: { type: number, nullable: true }
        p95_ms: { type: number, nullable: true }
      required: [d, base_metric]
    AdminMetricsResponse:
      type: object
      properties:
        ok: { type: boolean }
        rows:
          type: array
          items: { $ref: '#/components/schemas/MetricRow' }
        latency:
          type: array
          description: Decoded latency metrics (ms) derived from smoothing.
          items: { $ref: '#/components/schemas/LatencyMetric' }
        cache_hits:
          type: array
          description: Subset of metric rows with metric starting cache.hit.
          items: { $ref: '#/components/schemas/MetricRow' }
        cache_hit_ratios:
          type: object
          additionalProperties: { type: number }
          description: Map short key -> hit ratio for public endpoints.
        slo_ratios:
          type: object
          description: Per-route SLO counters and breach ratio for today.
          additionalProperties:
            type: object
            properties:
              good: { type: integer }
              breach: { type: integer }
              breach_ratio: { type: number }
            required: [good, breach, breach_ratio]
      required: [ok, rows]
    RetentionResult:
      type: object
      properties:
        ok: { type: boolean }
        deleted:
          type: object
          additionalProperties: { type: integer }
          description: Map table -> deleted rows.
        ms: { type: integer, description: 'Execution duration (ms)' }
        overrides:
          type: object
          additionalProperties: { type: integer }
          description: Applied override windows (present only if provided).
      required: [ok, deleted, ms]
