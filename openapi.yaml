openapi: 3.1.0
info:
  title: PokeQuant API
  version: 0.5.18
  description: |
    MVP API. Fields may add over time; removals are breaking. Use schema components.
    Public read endpoints include short-lived Cache-Control and ETag (conditional GET).
servers:
  - url: https://pokequant.jonathanbarreneche.workers.dev
paths:
  /health:
    get:
      summary: Health and latest dates
      responses:
        '200': { description: OK }
  /api/universe:
    get:
      summary: Universe listing
      description: May return Cache-Control: public, max-age=60; supports conditional GET with ETag
      responses:
        '200':
          description: OK
          headers:
            Cache-Control: { schema: { type: string } }
            ETag: { schema: { type: string }, description: Strong ETag for base data signature }
        '304': { description: Not Modified }
  /api/cards:
    get:
      summary: Cards with latest signals
      description: May return Cache-Control: public, max-age=30; supports conditional GET with ETag
      responses:
        '200':
          description: List of cards with signals
          headers:
            Cache-Control: { schema: { type: string } }
            ETag: { schema: { type: string } }
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/CardWithSignal' }
        '304': { description: Not Modified }
  /api/movers:
    get:
      summary: Top movers
      description: May return Cache-Control: public, max-age=30; supports conditional GET with ETag
      parameters:
        - in: query
          name: dir
          schema: { type: string, enum: [up, down] }
        - in: query
          name: n
          schema: { type: integer, minimum: 1, maximum: 50 }
      responses:
        '200':
          description: OK
          headers:
            Cache-Control: { schema: { type: string } }
            ETag: { schema: { type: string } }
        '304': { description: Not Modified }
  /api/card:
    get:
      summary: Single card timeseries
      parameters:
        - in: query
          name: id
          required: true
          schema: { type: string }
        - in: query
          name: days
          schema: { type: integer }
      responses:
        '200':
          description: Card timeseries bundle
          content:
            application/json:
              schema: { $ref: '#/components/schemas/CardTimeseries' }
  /research/card-csv:
    get:
      summary: Card CSV export
      responses: { '200': { description: CSV } }
  /admin/factor-returns:
    get:
      summary: Latest stored factor daily top-bottom quintile returns
      description: Returns list plus rolling aggregates (7d/30d compound, averages, Sharpe) under aggregates field.
      responses:
        '200': { description: OK }
  /admin/factor-returns/run:
    post:
      summary: Force recomputation of factor returns for latest date
      responses: { '200': { description: OK } }
  /admin/factor-risk:
    get:
      summary: Latest factor covariance/correlation pairs
      description: Returns factor pairwise covariance & correlation (rolling 60d window) for as_of date (query param optional, defaults today). pairs array includes factor_i, factor_j, cov, corr.
      responses: { '200': { description: OK } }
  /admin/factor-metrics:
    get:
      summary: Per-factor volatility & beta metrics
      description: Returns factor_metrics rows (vol, beta) for as_of date (query param optional, defaults today).
      responses: { '200': { description: OK } }
  /admin/factor-returns-smoothed:
    get:
      summary: Bayesian-smoothed factor returns
      description: Returns per-factor shrunken returns (ret_smoothed) for as_of date (query param optional, defaults today).
      responses: { '200': { description: OK } }
  /admin/signal-quality:
    get:
      summary: Signal quality stability metrics
      description: Returns IC stability metrics (ic_mean, ic_vol, lag-1 autocorr, half-life) for factors at as_of date (query param optional, defaults today).
      responses: { '200': { description: OK } }
  /admin/portfolio-pnl:
    get:
      summary: Portfolio daily PnL snapshots
      description: Returns portfolio_pnl rows (ret, turnover_cost, realized_pnl) filtered by optional portfolio_id and/or as_of.
      responses: { '200': { description: OK } }
  /admin/factor-ic/summary:
    get:
      summary: Rolling IC performance summary
      description: Per-factor stats over full history (<=90d) plus trailing 30d and 7d windows: average IC, absolute average IC, hit rate (>0), and information ratio (annualized) with window-specific fields.
      responses: { '200': { description: OK } }
  /admin/factor-performance:
    get:
      summary: Consolidated factor performance & suggested weights
      description: Combines recent factor returns and IC to produce per-factor performance metrics and normalized weight_suggest from trailing 30d absolute IC.
      responses: { '200': { description: OK } }
  /admin/portfolio-exposure/snapshot:
    post:
      summary: Force snapshot of portfolio factor exposure history for current latest components date
      responses: { '200': { description: OK } }
  /admin/portfolio-nav/snapshot:
    post:
      summary: Force portfolio NAV snapshot for latest prices
      responses: { '200': { description: OK } }
  /admin/test-insert:
    post:
      summary: (Test) Insert rows into allowlisted tables for test seeding
      responses: { '200': { description: OK } }
  /portfolio/exposure/history:
    get:
      summary: Portfolio factor exposure history (snapshots)
      responses: { '200': { description: OK } }
  /portfolio/attribution:
    get:
      summary: Portfolio performance attribution (factor contributions vs residual)
      responses: { '200': { description: OK } }
  /portfolio/pnl:
    get:
      summary: Portfolio daily PnL (authenticated)
      description: Returns per-day portfolio returns (ret) and realized components for authenticated portfolio (headers x-portfolio-id/secret). Optional days query (<=180).
      responses: { '200': { description: OK } }
  /api/subscribe:
    post:
      summary: Subscribe email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string }
              required: [email]
      responses:
    '200': { description: OK, headers: { 'X-RateLimit-Limit': { schema: { type: integer } }, 'X-RateLimit-Remaining': { schema: { type: integer } }, 'X-RateLimit-Reset': { schema: { type: integer } } } }
    '429': { description: Rate limited, headers: { 'Retry-After': { schema: { type: integer } } }, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
  /api/sets:
    get:
      summary: List sets
      description: May return Cache-Control: public, max-age=300; supports conditional GET with ETag
      responses:
        '200': { description: OK, headers: { Cache-Control: { schema: { type: string } }, ETag: { schema: { type: string } } } }
        '304': { description: Not Modified }
  /api/rarities:
    get:
      summary: List rarities
      description: May return Cache-Control: public, max-age=300; supports conditional GET with ETag
      responses:
        '200': { description: OK, headers: { Cache-Control: { schema: { type: string } }, ETag: { schema: { type: string } } } }
        '304': { description: Not Modified }
  /api/types:
    get:
      summary: List types
      description: May return Cache-Control: public, max-age=300; supports conditional GET with ETag
      responses:
        '200': { description: OK, headers: { Cache-Control: { schema: { type: string } }, ETag: { schema: { type: string } } } }
        '304': { description: Not Modified }
  /api/search:
    get:
      summary: Search cards
      parameters:
        - in: query
          name: q
          schema: { type: string }
      responses:
    '200': { description: OK, headers: { 'X-RateLimit-Limit': { schema: { type: integer } }, 'X-RateLimit-Remaining': { schema: { type: integer } }, 'X-RateLimit-Reset': { schema: { type: integer } } } }
    '429': { description: Rate limited, headers: { 'Retry-After': { schema: { type: integer } } }, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
  /portfolio/create:
    post:
      summary: Create portfolio
      responses: { '200': { description: OK } }
  /portfolio/add-lot:
    post:
      summary: Add portfolio lot
      responses: { '200': { description: OK } }
  /portfolio:
    get:
      summary: Get portfolio
      responses: { '200': { description: OK } }
  /portfolio/export:
    get:
      summary: Export portfolio
      responses: { '200': { description: OK } }
  /portfolio/exposure:
    get:
      summary: Portfolio factor exposure (latest components)
      responses: { '200': { description: OK } }
  /alerts/create:
    post:
      summary: Create price alert
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/AlertCreateRequest' }
      responses:
    '200': { description: Created, headers: { 'X-RateLimit-Limit': { schema: { type: integer } }, 'X-RateLimit-Remaining': { schema: { type: integer } }, 'X-RateLimit-Reset': { schema: { type: integer } } }, content: { application/json: { schema: { $ref: '#/components/schemas/AlertCreateResponse' } } } }
    '400': { description: Bad Request, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
  '429': { description: Rate limited, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
  /alerts/deactivate:
    get: { summary: Deactivate alert, responses: { '200': { description: OK } } }
    post: { summary: Deactivate alert (POST), responses: { '200': { description: OK } } }
  /ingest/trends:
    post:
      summary: Ingest SVI trends (secure)
      responses: { '200': { description: OK } }
  /admin/run-fast:
    post: { summary: Compute signals only, responses: { '200': { description: OK } } }
  /admin/run-now:
    post: { summary: Full pipeline run, responses: { '200': { description: OK } } }
  /admin/metrics:
    get:
      summary: Recent metrics (admin)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  rows:
                    type: array
                    items:
                      type: object
                      properties:
                        d: { type: string }
                        metric: { type: string }
                        count: { type: integer }
                  latency:
                    type: array
                    description: Decoded latency metrics (ms) for tags `lat.<tag>`
                    items:
                      type: object
                      properties:
                        d: { type: string }
                        base_metric: { type: string }
                        p50_ms: { type: number, nullable: true }
                        p95_ms: { type: number, nullable: true }
                required: [ok, rows]
  /admin/latency:
    get:
      summary: Latest latency snapshot (admin)
      description: Provides latest p50/p95 latency per tag only (single-day view).
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  rows:
                    type: array
                    items:
                      type: object
                      properties:
                        base_metric: { type: string }
                        p50_ms: { type: number, nullable: true }
                        p95_ms: { type: number, nullable: true }
                required: [ok, rows]
  /admin/run-alerts:
    post: { summary: Run alerts evaluation only, responses: { '200': { description: OK } } }
  /admin/migrations:
    get: { summary: List applied migrations (admin), responses: { '200': { description: OK } } }
  /admin/version:
    get:
      summary: Version metadata (admin)
      responses:
        '200': { description: OK }
  /admin/integrity:
    get:
      summary: Data integrity snapshot (admin)
      description: Coverage counts, latest dates, recent gap heuristics, and staleness flags.
      responses:
        '200': { description: OK }
  /admin/factor-weights:
    get:
      summary: List factor weights (admin)
      responses: { '200': { description: OK } }
  /admin/factor-weights/auto:
    post:
      summary: Auto derive factor weights from trailing IC (admin)
      responses: { '200': { description: OK } }
  /admin/factor-ic:
    get:
      summary: List factor IC history (admin)
      responses: { '200': { description: OK } }
  /admin/factor-ic/run:
    post:
      summary: Compute and store latest factor IC (admin)
      responses: { '200': { description: OK } }
  /admin/backtests:
    get:
      summary: List recent backtests (admin)
      responses: { '200': { description: OK } }
    post:
      summary: Run simple quintile spread backtest (admin)
      responses: { '200': { description: OK } }
  /admin/factors:
    get:
      summary: List factor configuration (admin)
      responses: { '200': { description: OK } }
    post:
      summary: Upsert factor configuration entry (admin)
      responses: { '200': { description: OK } }
  /admin/factors/toggle:
    post:
      summary: Toggle factor enabled flag (admin)
      responses: { '200': { description: OK } }
  /admin/factors/delete:
    post:
      summary: Delete factor from configuration (admin)
      responses: { '200': { description: OK } }
  /admin/retention:
    post:
      summary: Run data retention purge (admin)
      description: Applies retention windows to historical tables and returns deleted row counts per table.
      responses: { '200': { description: OK } }
  /admin/backtests/{id}:
    get:
      summary: Get backtest details (admin)
      responses: { '200': { description: OK } }
  /admin/snapshot:
    get:
      summary: Consolidated snapshot (admin)
      responses: { '200': { description: OK } }
  /admin/anomalies:
    get:
      summary: List recent anomalies (admin)
      description: Optional query param status=open|resolved to filter.
      responses: { '200': { description: OK } }
  /admin/anomalies/resolve:
    post:
      summary: Resolve or classify an anomaly (admin)
      description: Actions: ack, dismiss, ignore. Body: { id, action, note? }
      responses: { '200': { description: OK } }
  /admin/portfolio-nav:
    get:
      summary: Portfolio NAV history (admin)
      responses: { '200': { description: OK } }
  /admin/backfill:
    get:
      summary: List recent backfill jobs (admin)
      responses: { '200': { description: OK } }
    post:
      summary: Create backfill job (admin)
      responses: { '200': { description: OK } }
  /admin/backfill/{id}:
    get:
      summary: Backfill job detail (admin)
      responses: { '200': { description: OK } }
  /admin/ingestion/provenance:
    get:
      summary: List ingestion provenance records (admin)
  description: Optional query params: dataset, source, status, limit (<=500)
      responses: { '200': { description: OK } }
  /admin/ingest/prices:
    post:
      summary: Mock external price ingestion (admin)
      description: Inserts deterministic pseudo price history for recent days (default 3, max 30) and records provenance with source=external-mock.
      responses: { '200': { description: OK } }
  /admin/ingestion/config:
    get:
      summary: List ingestion configuration entries (admin)
      responses: { '200': { description: OK } }
    post:
      summary: Upsert ingestion configuration entry (admin)
      description: Body: { dataset, source, cursor?, enabled?, meta? }
      responses: { '200': { description: OK } }
  /admin/ingestion/run:
    post:
      summary: Run incremental ingestion for enabled config entries (admin)
      description: Advances cursor per (dataset,source) and records provenance; currently supports prices_daily only (deterministic pseudo data scaffold).
      responses: { '200': { description: OK } }
  /admin/audit:
    get:
      summary: List mutation audit trail entries (admin)
      description: Optional query params: resource, action, actor_type, resource_id, before_ts (pagination), limit (<=500)
      responses: { '200': { description: OK } }
  /admin/audit/stats:
    get:
      summary: Audit action/resource frequency stats
      description: Aggregated counts over trailing hours window (default 24, max 168). Params: hours.
      responses: { '200': { description: OK } }
  /admin/factor-correlations:
    get:
      summary: Rolling factor return correlation matrix
      description: Computes Pearson correlations of daily factor_returns over trailing days window (default 60, max 180). Returns matrix and avg_abs_corr.
      responses: { '200': { description: OK } }
components:
  schemas:
    Error:
      type: object
      properties:
        ok: { type: boolean, const: false }
        error: { type: string }
      required: [ok, error]
    CardBase:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        set_name: { type: string }
        rarity: { type: string }
        image_url: { type: string, nullable: true }
        types: { type: string, nullable: true, description: 'Pipe-delimited types' }
      required: [id, name]
    CardWithSignal:
      allOf:
        - $ref: '#/components/schemas/CardBase'
        - type: object
          properties:
            signal: { type: string, nullable: true }
            score: { type: number, nullable: true }
            price_usd: { type: number, nullable: true }
            price_eur: { type: number, nullable: true }
    SignalPoint:
      type: object
      properties:
        d: { type: string, description: 'ISO date' }
        signal: { type: string, nullable: true }
        score: { type: number, nullable: true }
        edge_z: { type: number, nullable: true }
        exp_ret: { type: number, nullable: true }
        exp_sd: { type: number, nullable: true }
      required: [d]
    PricePoint:
      type: object
      properties:
        d: { type: string }
        usd: { type: number, nullable: true }
        eur: { type: number, nullable: true }
      required: [d]
    SviPoint:
      type: object
      properties:
        d: { type: string }
        svi: { type: integer, nullable: true }
      required: [d]
    ComponentPoint:
      type: object
      properties:
        d: { type: string }
        ts7: { type: number, nullable: true }
        ts30: { type: number, nullable: true }
        dd: { type: number, nullable: true }
        vol: { type: number, nullable: true }
        z_svi: { type: number, nullable: true }
      required: [d]
    CardTimeseries:
      type: object
      properties:
        ok: { type: boolean }
        card: { $ref: '#/components/schemas/CardBase' }
        prices: { type: array, items: { $ref: '#/components/schemas/PricePoint' } }
        signals: { type: array, items: { $ref: '#/components/schemas/SignalPoint' } }
        svi: { type: array, items: { $ref: '#/components/schemas/SviPoint' } }
        components: { type: array, items: { $ref: '#/components/schemas/ComponentPoint' } }
      required: [ok]
    AlertCreateRequest:
      type: object
      properties:
        email: { type: string }
        card_id: { type: string }
        kind: { type: string, enum: [price_below, price_above] }
        threshold: { type: number }
      required: [email, card_id, threshold]
    AlertCreateResponse:
      type: object
      properties:
        ok: { type: boolean }
        id: { type: string }
        manage_token: { type: string }
        manage_url: { type: string }
      required: [ok, id, manage_token, manage_url]
    FactorRiskPair:
      type: object
      properties:
        factor_i: { type: string }
        factor_j: { type: string }
        cov: { type: number, nullable: true }
        corr: { type: number, nullable: true }
      required: [factor_i, factor_j]
    FactorMetric:
      type: object
      properties:
        as_of: { type: string }
        factor: { type: string }
        vol: { type: number, nullable: true }
        beta: { type: number, nullable: true }
      required: [as_of, factor]
    FactorReturnSmoothed:
      type: object
      properties:
        as_of: { type: string }
        factor: { type: string }
        ret_smoothed: { type: number, nullable: true }
      required: [as_of, factor]
    SignalQualityMetric:
      type: object
      properties:
        as_of: { type: string }
        factor: { type: string }
        ic_mean: { type: number, nullable: true }
        ic_vol: { type: number, nullable: true }
        ic_ir: { type: number, nullable: true }
        ic_half_life: { type: number, nullable: true }
      required: [as_of, factor]
    PortfolioPnlRow:
      type: object
      properties:
        portfolio_id: { type: string }
        as_of: { type: string }
        ret: { type: number, nullable: true }
        realized_pnl: { type: number, nullable: true }
        turnover_cost: { type: number, nullable: true }
      required: [portfolio_id, as_of]
