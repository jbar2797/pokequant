openapi: 3.1.0
info:
  title: PokeQuant API
  version: 0.2.4
  description: |
    MVP API. Fields may add over time; removals are breaking. Use schema components.
    Public read endpoints include short-lived Cache-Control and ETag (conditional GET).
servers:
  - url: https://pokequant.jonathanbarreneche.workers.dev
paths:
  /health:
    get:
      summary: Health and latest dates
      responses:
        '200': { description: OK }
  /api/universe:
    get:
      summary: Universe listing
  description: May return Cache-Control: public, max-age=60
        responses:
          '200': { description: OK }
  /api/cards:
    get:
      summary: Cards with latest signals
  description: May return Cache-Control: public, max-age=30
      responses:
        '200':
          description: List of cards with signals
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/CardWithSignal' }
  /api/movers:
    get:
      summary: Top movers
  description: May return Cache-Control: public, max-age=30
      parameters:
        - in: query
          name: dir
          schema: { type: string, enum: [up, down] }
        - in: query
          name: n
          schema: { type: integer, minimum: 1, maximum: 50 }
      responses: { '200': { description: OK } }
  /api/card:
    get:
      summary: Single card timeseries
      parameters:
        - in: query
          name: id
          required: true
          schema: { type: string }
        - in: query
          name: days
          schema: { type: integer }
      responses:
        '200':
          description: Card timeseries bundle
          content:
            application/json:
              schema: { $ref: '#/components/schemas/CardTimeseries' }
  /research/card-csv:
    get:
      summary: Card CSV export
      responses: { '200': { description: CSV } }
  /api/subscribe:
    post:
      summary: Subscribe email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string }
              required: [email]
      responses:
    '200': { description: OK, headers: { 'X-RateLimit-Limit': { schema: { type: integer } }, 'X-RateLimit-Remaining': { schema: { type: integer } }, 'X-RateLimit-Reset': { schema: { type: integer } } } }
    '429': { description: Rate limited, headers: { 'Retry-After': { schema: { type: integer } } }, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
  /api/sets:
  get: { summary: List sets, description: May return Cache-Control: public, max-age=300, responses: { '200': { description: OK } } }
  /api/rarities:
  get: { summary: List rarities, description: May return Cache-Control: public, max-age=300, responses: { '200': { description: OK } } }
  /api/types:
  get: { summary: List types, description: May return Cache-Control: public, max-age=300, responses: { '200': { description: OK } } }
  /api/search:
    get:
      summary: Search cards
      parameters:
        - in: query
          name: q
          schema: { type: string }
      responses:
    '200': { description: OK, headers: { 'X-RateLimit-Limit': { schema: { type: integer } }, 'X-RateLimit-Remaining': { schema: { type: integer } }, 'X-RateLimit-Reset': { schema: { type: integer } } } }
    '429': { description: Rate limited, headers: { 'Retry-After': { schema: { type: integer } } }, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
  /portfolio/create:
    post:
      summary: Create portfolio
      responses: { '200': { description: OK } }
  /portfolio/add-lot:
    post:
      summary: Add portfolio lot
      responses: { '200': { description: OK } }
  /portfolio:
    get:
      summary: Get portfolio
      responses: { '200': { description: OK } }
  /portfolio/export:
    get:
      summary: Export portfolio
      responses: { '200': { description: OK } }
  /alerts/create:
    post:
      summary: Create price alert
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/AlertCreateRequest' }
      responses:
    '200': { description: Created, headers: { 'X-RateLimit-Limit': { schema: { type: integer } }, 'X-RateLimit-Remaining': { schema: { type: integer } }, 'X-RateLimit-Reset': { schema: { type: integer } } }, content: { application/json: { schema: { $ref: '#/components/schemas/AlertCreateResponse' } } } }
    '400': { description: Bad Request, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
  '429': { description: Rate limited, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
  /alerts/deactivate:
    get: { summary: Deactivate alert, responses: { '200': { description: OK } } }
    post: { summary: Deactivate alert (POST), responses: { '200': { description: OK } } }
  /ingest/trends:
    post:
      summary: Ingest SVI trends (secure)
      responses: { '200': { description: OK } }
  /admin/run-fast:
    post: { summary: Compute signals only, responses: { '200': { description: OK } } }
  /admin/run-now:
    post: { summary: Full pipeline run, responses: { '200': { description: OK } } }
  /admin/metrics:
    get:
      summary: Recent metrics (admin)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  rows:
                    type: array
                    items:
                      type: object
                      properties:
                        d: { type: string }
                        metric: { type: string }
                        count: { type: integer }
                  latency:
                    type: array
                    description: Decoded latency metrics (ms) for tags `lat.<tag>`
                    items:
                      type: object
                      properties:
                        d: { type: string }
                        base_metric: { type: string }
                        p50_ms: { type: number, nullable: true }
                        p95_ms: { type: number, nullable: true }
                required: [ok, rows]
  /admin/latency:
    get:
      summary: Latest latency snapshot (admin)
      description: Provides latest p50/p95 latency per tag only (single-day view).
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  rows:
                    type: array
                    items:
                      type: object
                      properties:
                        base_metric: { type: string }
                        p50_ms: { type: number, nullable: true }
                        p95_ms: { type: number, nullable: true }
                required: [ok, rows]
  /admin/run-alerts:
    post: { summary: Run alerts evaluation only, responses: { '200': { description: OK } } }
  /admin/migrations:
    get: { summary: List applied migrations (admin), responses: { '200': { description: OK } } }
components:
  schemas:
    Error:
      type: object
      properties:
        ok: { type: boolean, const: false }
        error: { type: string }
      required: [ok, error]
    CardBase:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        set_name: { type: string }
        rarity: { type: string }
        image_url: { type: string, nullable: true }
        types: { type: string, nullable: true, description: 'Pipe-delimited types' }
      required: [id, name]
    CardWithSignal:
      allOf:
        - $ref: '#/components/schemas/CardBase'
        - type: object
          properties:
            signal: { type: string, nullable: true }
            score: { type: number, nullable: true }
            price_usd: { type: number, nullable: true }
            price_eur: { type: number, nullable: true }
    SignalPoint:
      type: object
      properties:
        d: { type: string, description: 'ISO date' }
        signal: { type: string, nullable: true }
        score: { type: number, nullable: true }
        edge_z: { type: number, nullable: true }
        exp_ret: { type: number, nullable: true }
        exp_sd: { type: number, nullable: true }
      required: [d]
    PricePoint:
      type: object
      properties:
        d: { type: string }
        usd: { type: number, nullable: true }
        eur: { type: number, nullable: true }
      required: [d]
    SviPoint:
      type: object
      properties:
        d: { type: string }
        svi: { type: integer, nullable: true }
      required: [d]
    ComponentPoint:
      type: object
      properties:
        d: { type: string }
        ts7: { type: number, nullable: true }
        ts30: { type: number, nullable: true }
        dd: { type: number, nullable: true }
        vol: { type: number, nullable: true }
        z_svi: { type: number, nullable: true }
      required: [d]
    CardTimeseries:
      type: object
      properties:
        ok: { type: boolean }
        card: { $ref: '#/components/schemas/CardBase' }
        prices: { type: array, items: { $ref: '#/components/schemas/PricePoint' } }
        signals: { type: array, items: { $ref: '#/components/schemas/SignalPoint' } }
        svi: { type: array, items: { $ref: '#/components/schemas/SviPoint' } }
        components: { type: array, items: { $ref: '#/components/schemas/ComponentPoint' } }
      required: [ok]
    AlertCreateRequest:
      type: object
      properties:
        email: { type: string }
        card_id: { type: string }
        kind: { type: string, enum: [price_below, price_above] }
        threshold: { type: number }
      required: [email, card_id, threshold]
    AlertCreateResponse:
      type: object
      properties:
        ok: { type: boolean }
        id: { type: string }
        manage_token: { type: string }
        manage_url: { type: string }
      required: [ok, id, manage_token, manage_url]
